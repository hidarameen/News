#!/usr/bin/env python3
"""
ุณูุฑูุจุช ุงุฎุชุจุงุฑ ูุธุงู ุฅุฏุงุฑุฉ ุงููููุงุช ุจุงุณุชุฎุฏุงู SQLite
ููุงุฎุชุจุงุฑ ุงูุณุฑูุน ุจุฏูู ุงูุญุงุฌุฉ ูู PostgreSQL
"""

import asyncio
import sqlite3
import os
from datetime import datetime

# ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช SQLite ููุงุฎุชุจุงุฑ
def setup_sqlite_db():
    """ุฅูุดุงุก ุฌุฏุงูู SQLite ููุงุฎุชุจุงุฑ"""
    conn = sqlite3.connect('test_bot.db')
    cursor = conn.cursor()
    
    # ุฌุฏูู ุงููุณุชุฎุฏููู
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            language_code TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # ุฌุฏูู ุงููููุงุช
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            channel_id INTEGER NOT NULL,
            channel_username TEXT,
            channel_title TEXT,
            is_admin BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, channel_id),
            FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
        )
    ''')
    
    # ุฅูุดุงุก ููุฑุณ
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_channels_user_id ON channels(user_id)')
    
    conn.commit()
    conn.close()
    print("โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช SQLite ููุงุฎุชุจุงุฑ")

# ูุญุงูุงุฉ ูุธุงุฆู ุฅุฏุงุฑุฉ ุงููููุงุช
class TestChannelManager:
    @staticmethod
    def add_channel(user_id: int, channel_id: int, channel_username: str, channel_title: str) -> bool:
        """ุฅุถุงูุฉ ููุงุฉ ูููุณุชุฎุฏู"""
        try:
            conn = sqlite3.connect('test_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO channels (user_id, channel_id, channel_username, channel_title, is_admin)
                VALUES (?, ?, ?, ?, 1)
            ''', (user_id, channel_id, channel_username, channel_title))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูููุงุฉ: {e}")
            return False
    
    @staticmethod
    def get_user_channels(user_id: int) -> list:
        """ุงูุญุตูู ุนูู ูููุงุช ุงููุณุชุฎุฏู"""
        try:
            conn = sqlite3.connect('test_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT channel_id, channel_username, channel_title, is_admin, created_at
                FROM channels
                WHERE user_id = ?
                ORDER BY created_at DESC
            ''', (user_id,))
            
            columns = [desc[0] for desc in cursor.description]
            rows = cursor.fetchall()
            conn.close()
            
            return [dict(zip(columns, row)) for row in rows]
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงููููุงุช: {e}")
            return []
    
    @staticmethod
    def remove_channel(user_id: int, channel_id: int) -> bool:
        """ุญุฐู ููุงุฉ ูู ูุงุฆูุฉ ุงููุณุชุฎุฏู"""
        try:
            conn = sqlite3.connect('test_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM channels WHERE user_id = ? AND channel_id = ?', (user_id, channel_id))
            
            affected = cursor.rowcount
            conn.commit()
            conn.close()
            
            return affected > 0
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุญุฐู ุงูููุงุฉ: {e}")
            return False
    
    @staticmethod
    def get_channel_count(user_id: int) -> int:
        """ุงูุญุตูู ุนูู ุนุฏุฏ ูููุงุช ุงููุณุชุฎุฏู"""
        try:
            conn = sqlite3.connect('test_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM channels WHERE user_id = ?', (user_id,))
            
            count = cursor.fetchone()[0]
            conn.close()
            
            return count
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุญุณุงุจ ุงููููุงุช: {e}")
            return 0

def test_channel_functions():
    """ุงุฎุชุจุงุฑ ูุธุงุฆู ุฅุฏุงุฑุฉ ุงููููุงุช"""
    print("\n๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงุฆู ุฅุฏุงุฑุฉ ุงููููุงุช...")
    
    # ุจูุงูุงุช ุงุฎุชุจุงุฑูุฉ
    test_user_id = 123456789
    test_channels = [
        (-1001234567890, "channel1", "ููุงุฉ ุงูุฃุฎุจุงุฑ"),
        (-1001234567891, "channel2", "ููุงุฉ ุงูุชูููุฉ"),
        (-1001234567892, "channel3", "ููุงุฉ ุงูุชุนููู"),
    ]
    
    manager = TestChannelManager()
    
    # ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ุงููููุงุช
    print("\n๐ ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ุงููููุงุช...")
    for channel_id, username, title in test_channels:
        success = manager.add_channel(test_user_id, channel_id, username, title)
        if success:
            print(f"  โ ุชู ุฅุถุงูุฉ: {title} (@{username})")
        else:
            print(f"  โ ูุดู ุฅุถุงูุฉ: {title}")
    
    # ุงุฎุชุจุงุฑ ุนุฏุฏ ุงููููุงุช
    print("\n๐ ุงุฎุชุจุงุฑ ุนุฏุฏ ุงููููุงุช...")
    count = manager.get_channel_count(test_user_id)
    print(f"  ุนุฏุฏ ุงููููุงุช: {count}")
    
    # ุงุฎุชุจุงุฑ ุนุฑุถ ุงููููุงุช
    print("\n๐ ุงุฎุชุจุงุฑ ุนุฑุถ ุงููููุงุช...")
    channels = manager.get_user_channels(test_user_id)
    for i, channel in enumerate(channels, 1):
        print(f"  {i}. {channel['channel_title']} (@{channel['channel_username']})")
        print(f"     ID: {channel['channel_id']}")
    
    # ุงุฎุชุจุงุฑ ุญุฐู ููุงุฉ
    print("\n๐ ุงุฎุชุจุงุฑ ุญุฐู ููุงุฉ...")
    if channels:
        channel_to_delete = channels[0]['channel_id']
        success = manager.remove_channel(test_user_id, channel_to_delete)
        if success:
            print(f"  โ ุชู ุญุฐู ุงูููุงุฉ: {channels[0]['channel_title']}")
        else:
            print(f"  โ ูุดู ุญุฐู ุงูููุงุฉ")
        
        # ุงูุชุญูู ูู ุงูุนุฏุฏ ุจุนุฏ ุงูุญุฐู
        new_count = manager.get_channel_count(test_user_id)
        print(f"  ุนุฏุฏ ุงููููุงุช ุจุนุฏ ุงูุญุฐู: {new_count}")
    
    # ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ููุงุฉ ููุฑุฑุฉ
    print("\n๐ ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ููุงุฉ ููุฑุฑุฉ...")
    if test_channels:
        channel_id, username, title = test_channels[0]
        success = manager.add_channel(test_user_id, channel_id, username, title + " (ูุญุฏุซ)")
        if success:
            print(f"  โ ุชู ุชุญุฏูุซ ุงูููุงุฉ: {title}")
        
        # ุนุฑุถ ุงููููุงุช ุจุนุฏ ุงูุชุญุฏูุซ
        channels = manager.get_user_channels(test_user_id)
        updated_channel = next((ch for ch in channels if ch['channel_id'] == channel_id), None)
        if updated_channel:
            print(f"  ุงูุงุณู ุงูุฌุฏูุฏ: {updated_channel['channel_title']}")

def test_channel_extraction():
    """ุงุฎุชุจุงุฑ ุงุณุชุฎุฑุงุฌ ูุนุฑูุงุช ุงููููุงุช ูู ุงููุต"""
    print("\n๐ ุงุฎุชุจุงุฑ ุงุณุชุฎุฑุงุฌ ูุนุฑูุงุช ุงููููุงุช...")
    
    test_inputs = [
        "@channel_username",
        "https://t.me/channel_name",
        "http://telegram.me/another_channel",
        "-1001234567890",
        "1234567890",  # ุณูุชู ุชุญูููู ุฅูู ID ููุงุฉ ุณุงูุจ
        "https://t.me/joinchat/XXXXX",  # ุฑุงุจุท ุฏุนูุฉ - ูุฌุจ ุชุฌุงููู
        "ูุต ุนุงุฏู ุจุฏูู ููุงุฉ",
    ]
    
    import re
    
    for input_text in test_inputs:
        print(f"\n  ุฅุฏุฎุงู: {input_text}")
        
        # ูุญุงูุงุฉ ุงุณุชุฎุฑุงุฌ ุงูููุงุฉ
        if input_text.startswith('@'):
            print(f"    โ ูุนุฑู ููุงุฉ: {input_text}")
        elif 't.me/' in input_text or 'telegram.me/' in input_text:
            match = re.search(r't(?:elegram)?\.me/([a-zA-Z0-9_]+)', input_text)
            if match and not match.group(1).startswith('joinchat'):
                print(f"    โ ูุนุฑู ููุงุฉ: @{match.group(1)}")
            else:
                print(f"    โ ููุณ ููุงุฉ ุตุงูุญุฉ")
        elif input_text.lstrip('-').isdigit():
            channel_id = int(input_text)
            if channel_id > 0:
                channel_id = -100 * abs(channel_id)
            print(f"    โ ID ููุงุฉ: {channel_id}")
        else:
            print(f"    โ ููุณ ููุงุฉ")

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุงุฎุชุจุงุฑ"""
    print("=" * 60)
    print("๐ค ุงุฎุชุจุงุฑ ูุธุงู ุฅุฏุงุฑุฉ ุงููููุงุช ููุจูุช")
    print("=" * 60)
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    setup_sqlite_db()
    
    # ุงุฎุชุจุงุฑ ุงููุธุงุฆู
    test_channel_functions()
    
    # ุงุฎุชุจุงุฑ ุงุณุชุฎุฑุงุฌ ุงููููุงุช
    test_channel_extraction()
    
    print("\n" + "=" * 60)
    print("โ ุงูุชูู ุงูุงุฎุชุจุงุฑ ุจูุฌุงุญ!")
    print("=" * 60)
    
    # ุญุฐู ููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุงุฎุชุจุงุฑูุฉ
    if os.path.exists('test_bot.db'):
        os.remove('test_bot.db')
        print("\n๐ ุชู ุญุฐู ููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุงุฎุชุจุงุฑูุฉ")

if __name__ == "__main__":
    main()